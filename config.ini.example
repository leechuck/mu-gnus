; Example configuration file for mail-assistant
; Copy this to config.ini and customize it.
; The application will look for config.ini in the current directory,
; then ~/.config/mail-assistant/config.ini

[paths]
; Path to the SQLite database file.
database = ~/.mail.db
; Path to the prompt template file for mail-classify.py
prompt_file = prompts/classify.txt
; Path to the org-mode template for mail-to-org.py
org_template =

[llm]
; type can be 'cmd', 'ollama', 'openai', 'openrouter', or 'gpt4all'
type = cmd
; Command to execute when type is 'cmd'.
command = echo '{"category": "automated", "urgency": "low", "sender_type": "system"}'
; Model for 'ollama', 'openai', 'openrouter', or 'gpt4all'.
; For OpenRouter, this can be e.g. "openai/gpt-4o" or "google/gemini-flash-1.5".
model =
; API key for 'openai' or 'openrouter'.
api_key =
; API URL for 'ollama', 'gpt4all', or a self-hosted 'openai' compatible endpoint.
; Default for ollama: http://localhost:11434
; Default for gpt4all: http://localhost:4891
api_url =

[classification]
; Comma-separated list of categories.
categories = important, newsletter, social, automated, spam
; Default category on classification failure.
default_category = automated
; Automatically mark emails as 'needs-reply' if category is 'important'.
auto_needs_reply = true

[processing]
; Maximum size of an email to process, in bytes (10MB).
max_email_size = 10485760
; Maximum length of the email body to include in the LLM prompt.
max_body_length = 1000

[database]
; Number of days to retain email records. 0 means forever.
retention_days = 0
; Whether to run VACUUM on the database automatically.
auto_vacuum = false
